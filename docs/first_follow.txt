Link da ferramenta: https://www.cs.princeton.edu/courses/archive/spring20/cos320/LL1/

----xxx----

Prog ::= Decl CmdBlock
Decl ::= Consts Types SubProg Vars
Consts ::= const Id := Exp ; Consts
Consts ::= ''

Exp ::= Terms Exp_
Exp_ ::= || Terms Exp_  
Exp_ ::= ''

Terms ::= Comps Terms_
Terms_ ::= && Comps Terms_
Terms_ ::= ''

Comps ::=  Factor Comps_
Comps_ ::= !=  Factor
Comps_ ::= == Factor
Comps_ ::= < Factor
Comps_ ::= > Factor
Comps_ ::= <= Factor
Comps_ ::= >= Factor
Comps_ ::= ''

Factor ::= ! AriOp
Factor ::= AriOp

AriOp ::= AriOp2 AriOp_
AriOp_ ::= + AriOp2 AriOp_
AriOp_ ::= - AriOp2 AriOp_
AriOp_ ::= ''

AriOp2 ::= Parenthesis AriOp2_
AriOp2_::= * Parenthesis AriOp2_
AriOp2_::= / Parenthesis AriOp2_
AriOp2_::= % Parenthesis AriOp2_
AriOp2_::= ''

Parenthesis ::= UnaryExp
Parenthesis ::= ( Exp ) 

UnaryExp ::= + UnaryExp
UnaryExp ::= - UnaryExp
UnaryExp ::= SimpleExp 

SimpleExp ::= NumExp
SimpleExp ::= AcessMemAddr

NumExp ::= V_INT
NumExp ::= V_REAL
NumExp ::= V_BOOL
NumExp ::= V_CHAR 

AcessMemAddr ::= Id AcessMemAddr_
AcessMemAddr_ ::= . Id AcessMemAddr_
AcessMemAddr_ ::= [ Exp ] AcessMemAddr_
AcessMemAddr_ ::= ( Args ) AcessMemAddr_
AcessMemAddr_ ::= ''

Types ::= type Id := TypeDec ; Types
Types ::= ''

TypeDec ::= bool
TypeDec ::= int
TypeDec ::= real
TypeDec ::= char
TypeDec ::= Id
TypeDec ::=array [ Interval ] of TypeDec
TypeDec ::= record Fields end

Interval ::= Exp .. Exp Interval_
Interval_ ::= , Interval
Interval_ ::= ''

Fields ::= Id : TypeDec `;` Fields
Fields ::= ''

SubProg ::= ProcedureDecl SubProg
SubProg ::= FunctionDecl SubProg
SubProg ::= ''

ProcedureDecl ::= procedure Id ( Parameters ) CmdBlock ;

FunctionDecl ::= function Id ( Parameters ) : TypeDec CmdBlock ;

Parameters ::= ParametersAux
Parameters ::= ''
ParametersAux ::= Id : TypeDec ParametersAux_ 
ParametersAux_::= , ParametersAux
ParametersAux_::=  ''

Vars ::= var Id : TypeDecl ; Vars
Vars ::= ''

CmdBlock ::= begin Vars Cmds end

Cmds ::= CmdAux Cmds_ 
Cmds_ ::= ; Cmds
Cmds_ ::= ''

CmdAux ::= AcessMemAddr CmdAux_
CmdAux_ ::= := Exp
CmdAux_ ::= ''
CmdAux ::= CmdBlock
CmdAux ::= CmdConditional
CmdAux ::= for Id := Exp to Exp step Exp CmdBlock
CmdAux ::= loop Vars Cmds end
CmdAux ::= exit when Exp
CmdAux ::= continue
CmdAux ::= CmdReturn

CmdConditional ::= if Exp then CmdBlock CmdConditionalEnd
CmdConditionalEnd ::= else CmdBlock
CmdConditionalEnd ::= ''

CmdReturn ::= return CmdReturnExp
CmdReturnExp ::= Exp
CmdReturnExp ::= ''

Args ::= ArgsAux
Args ::= ''
ArgsAux ::= Exp ArgsAux_ 
ArgsAux_ ::= , ArgsAux
ArgsAux_ ::= ''

